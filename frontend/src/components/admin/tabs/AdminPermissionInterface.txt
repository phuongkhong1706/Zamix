import React, { useState, useEffect} from 'react';
import { Search, CheckCircle, XCircle, UserPlus, Edit, Trash2, Users, Calendar, Clock } from 'lucide-react';
import '../../../styles/admin/AdminPermissionInterface.css';

const AdminPermissionInterface = () => {
  // Mock data cho k·ª≥ thi
const [exams, setExams] = useState([]);
const [loading, setLoading] = useState(true);

useEffect(() => {
  fetch('http://localhost:8000/api/admin/admin_manage_exam/')
    .then((response) => {
      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ server');
      }
      return response.json();
    })
    .then((data) => {
      console.log("üì¶ D·ªØ li·ªáu g·ªëc t·ª´ API:", data);

      const mappedExams = data.map((exam) => ({
        id: exam.id,
        name: exam.name,
        subject: exam.subject || 'Kh√¥ng r√µ',
        date: exam.date,
        time: exam.time,
        status: exam.status_display,               // Tr·∫°ng th√°i k·ª≥ thi: "K·ª≥ thi ƒëang di·ªÖn ra", ...
        approvalStatus: exam.approval_status_display, // Tr·∫°ng th√°i duy·ªát: "Ch·ªù duy·ªát", "ƒê√£ duy·ªát"
        studentCount: exam.studentCount,
        description: exam.description || ''
      }));

      setExams(mappedExams);
      setLoading(false);
    })
    .catch((error) => {
      console.error('‚ùå L·ªói khi g·ªçi API k·ª≥ thi:', error);
      setLoading(false);
    });
}, []);

  // Mock data cho h·ªçc sinh
  const [students] = useState([
    { id: 1, name: 'Nguy·ªÖn VƒÉn An', class: '10A1', email: 'an.nguyen@email.com' },
    { id: 2, name: 'Tr·∫ßn Th·ªã B√¨nh', class: '10A2', email: 'binh.tran@email.com' },
    { id: 3, name: 'L√™ Minh C∆∞·ªùng', class: '11B1', email: 'cuong.le@email.com' },
    { id: 4, name: 'Ph·∫°m Thu Dung', class: '11B2', email: 'dung.pham@email.com' },
    { id: 5, name: 'Ho√†ng VƒÉn Em', class: '12C1', email: 'em.hoang@email.com' }
  ]);

  const [selectedExam, setSelectedExam] = useState(null);
  const [showAddStudentModal, setShowAddStudentModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedStudents, setSelectedStudents] = useState([]);

  // X·ª≠ l√Ω duy·ªát k·ª≥ thi
  const approveExam = (examId) => {
    setExams(prev => prev.map(exam => 
      exam.id === examId ? { ...exam, status: 'approved' } : exam
    ));
  };

  // X·ª≠ l√Ω x√≥a k·ª≥ thi
  const deleteExam = (examId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a k·ª≥ thi n√†y?')) {
      setExams(prev => prev.filter(exam => exam.id !== examId));
    }
  };

  // X·ª≠ l√Ω th√™m h·ªçc sinh v√†o k·ª≥ thi
  const addStudentsToExam = () => {
    if (selectedStudents.length > 0 && selectedExam) {
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng h·ªçc sinh trong k·ª≥ thi
      setExams(prev => prev.map(exam => 
        exam.id === selectedExam.id 
          ? { ...exam, studentCount: exam.studentCount + selectedStudents.length }
          : exam
      ));
      
      alert(`ƒê√£ th√™m ${selectedStudents.length} h·ªçc sinh v√†o k·ª≥ thi "${selectedExam.name}"`);
      setSelectedStudents([]);
      setShowAddStudentModal(false);
      setSelectedExam(null);
    }
  };

  // L·ªçc h·ªçc sinh theo t√¨m ki·∫øm
  const filteredStudents = students.filter(student =>
    student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    student.class.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // X·ª≠ l√Ω ch·ªçn/b·ªè ch·ªçn h·ªçc sinh
  const toggleStudentSelection = (studentId) => {
    setSelectedStudents(prev => 
      prev.includes(studentId)
        ? prev.filter(id => id !== studentId)
        : [...prev, studentId]
    );
  };

  const getStatusBadge = (status) => {
    const statusClasses = {
      pending: 'adper-status-pending',
      approved: 'adper-status-approved',
      rejected: 'adper-status-rejected'
    };
    
    const labels = {
      pending: 'Ch·ªù duy·ªát',
      approved: 'ƒê√£ duy·ªát',
      rejected: 'T·ª´ ch·ªëi'
    };

    return (
      <span className={`adper-status-badge ${statusClasses[status]}`}>
        {labels[status]}
      </span>
    );
  };

  return (
    <div className="adper-container">
      <div className="adper-main-content">

        {/* Stats Cards */}
        <div className="adper-stats-grid">
          <div className="adper-stats-card">
            <div className="adper-stats-content">
              <div className="adper-stats-info">
                <p className="adper-stats-label">T·ªïng k·ª≥ thi</p>
                <p className="adper-stats-number">{exams.length}</p>
              </div>
              <div className="adper-stats-icon adper-stats-icon-blue">
                <Calendar className="adper-icon" />
              </div>
            </div>
          </div>
          
          <div className="adper-stats-card">
            <div className="adper-stats-content">
              <div className="adper-stats-info">
                <p className="adper-stats-label">Ch·ªù duy·ªát</p>
                <p className="adper-stats-number adper-stats-number-yellow">
                  {exams.filter(exam => exam.status === 'pending').length}
                </p>
              </div>
              <div className="adper-stats-icon adper-stats-icon-yellow">
                <Clock className="adper-icon" />
              </div>
            </div>
          </div>
          
          <div className="adper-stats-card">
            <div className="adper-stats-content">
              <div className="adper-stats-info">
                <p className="adper-stats-label">ƒê√£ duy·ªát</p>
                <p className="adper-stats-number adper-stats-number-green">
                  {exams.filter(exam => exam.status === 'approved').length}
                </p>
              </div>
              <div className="adper-stats-icon adper-stats-icon-green">
                <CheckCircle className="adper-icon" />
              </div>
            </div>
          </div>
        </div>

        {/* Exam List */}
        <div className="adper-exam-table-container">
          <div className="adper-exam-table-header">
            <h2 className="adper-table-title">Danh s√°ch K·ª≥ thi</h2>
          </div>
          
          <div className="adper-table-wrapper">
            <table className="adper-exam-table">
              <thead className="adper-table-head">
                <tr>
                  <th className="adper-table-th">T√™n k·ª≥ thi</th>
                  <th className="adper-table-th">Ng√†y thi</th>
                  <th className="adper-table-th">Tr·∫°ng th√°i</th>
                  <th className="adper-table-th">H·ªçc sinh</th>
                  <th className="adper-table-th">Thao t√°c</th>
                </tr>
              </thead>
              <tbody className="adper-table-body">
                {exams.map((exam) => (
                  <tr key={exam.id} className="adper-table-row">
                    <td className="adper-table-td">
                      <div>
                        <div className="adper-exam-name">{exam.name}</div>
                        <div className="adper-exam-description">{exam.description}</div>
                      </div>
                    </td>
                    <td className="adper-table-td">
                      <div className="adper-exam-date">{exam.date}</div>
                      <div className="adper-exam-time">{exam.time}</div>
                    </td>
                    <td className="adper-table-td">
                      {getStatusBadge(exam.status)}
                    </td>
                    <td className="adper-table-td">
                      <div className="adper-student-count">
                        <Users className="adper-student-icon" />
                        {exam.studentCount}
                      </div>
                    </td>
                    <td className="adper-table-td">
                      <div className="adper-action-buttons">
                        {exam.status === 'pending' && (
                          <button
                            onClick={() => approveExam(exam.id)}
                            className="adper-btn adper-btn-approve"
                          >
                            <CheckCircle className="adper-btn-icon" />
                            Duy·ªát
                          </button>
                        )}
                        
                        <button
                          onClick={() => {
                            setSelectedExam(exam);
                            setShowAddStudentModal(true);
                          }}
                          className="adper-btn adper-btn-add-student"
                        >
                          <UserPlus className="adper-btn-icon" />
                          Th√™m HS
                        </button>
                        
                        <button
                          onClick={() => deleteExam(exam.id)}
                          className="adper-btn adper-btn-delete"
                        >
                          <Trash2 className="adper-btn-icon" />
                          X√≥a
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Add Student Modal */}
        {showAddStudentModal && (
          <div className="adper-modal-overlay">
            <div className="adper-modal">
              <div className="adper-modal-header">
                <div className="adper-modal-header-content">
                  <h3 className="adper-modal-title">
                    Th√™m h·ªçc sinh v√†o k·ª≥ thi: {selectedExam?.name}
                  </h3>
                  <button
                    onClick={() => {
                      setShowAddStudentModal(false);
                      setSelectedExam(null);
                      setSelectedStudents([]);
                    }}
                    className="adper-modal-close"
                  >
                    <XCircle className="adper-modal-close-icon" />
                  </button>
                </div>
              </div>
              
              <div className="adper-modal-body">
                {/* Search */}
                <div className="adper-search-container">
                  <div className="adper-search-wrapper">
                    <Search className="adper-search-icon" />
                    <input
                      type="text"
                      placeholder="T√¨m ki·∫øm h·ªçc sinh theo t√™n ho·∫∑c l·ªõp..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="adper-search-input"
                    />
                  </div>
                </div>

                {/* Student List */}
                <div className="adper-student-list">
                  {filteredStudents.map((student) => (
                    <div
                      key={student.id}
                      className={`adper-student-item ${
                        selectedStudents.includes(student.id) ? 'adper-student-selected' : ''
                      }`}
                      onClick={() => toggleStudentSelection(student.id)}
                    >
                      <div className="adper-student-checkbox-wrapper">
                        <input
                          type="checkbox"
                          checked={selectedStudents.includes(student.id)}
                          onChange={() => toggleStudentSelection(student.id)}
                          className="adper-student-checkbox"
                        />
                        <div className="adper-student-info">
                          <div className="adper-student-name">{student.name}</div>
                          <div className="adper-student-details">
                            L·ªõp: {student.class} ‚Ä¢ {student.email}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {selectedStudents.length > 0 && (
                  <div className="adper-selected-info">
                    <p className="adper-selected-text">
                      ƒê√£ ch·ªçn {selectedStudents.length} h·ªçc sinh
                    </p>
                  </div>
                )}
              </div>

              <div className="adper-modal-footer">
                <button
                  onClick={() => {
                    setShowAddStudentModal(false);
                    setSelectedExam(null);
                    setSelectedStudents([]);
                  }}
                  className="adper-btn adper-btn-cancel"
                >
                  H·ªßy
                </button>
                <button
                  onClick={addStudentsToExam}
                  disabled={selectedStudents.length === 0}
                  className="adper-btn adper-btn-confirm"
                >
                  Th√™m {selectedStudents.length} h·ªçc sinh
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminPermissionInterface;