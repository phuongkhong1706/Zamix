import React, { useState, useEffect, useRef, useCallback } from "react";
import { useParams, useNavigate } from "react-router-dom";
import "../../../../styles/CountdownTimer.css";
import LatexInputKaTeX, { renderWithLatex } from "./../../../teacher/tabs/exams/LatexInputKaTeX";
function CountdownTimer({ durationInSeconds, onEnd }) {
  const [timeLeft, setTimeLeft] = useState(durationInSeconds * 60);

  useEffect(() => {
    if (!durationInSeconds || isNaN(durationInSeconds)) return;

    const start = Date.now();
    const end = start + durationInSeconds * 60 * 1000;

    const tick = () => {
      const now = Date.now();
      const remaining = Math.max(0, Math.round((end - now) / 1000));
      setTimeLeft(remaining);
      if (remaining <= 0) {
        clearInterval(interval);
        onEnd?.();
      }
    };

    tick();
    const interval = setInterval(tick, 1000);
    return () => clearInterval(interval);
  }, [durationInSeconds, onEnd]);

  const percentage = ((durationInSeconds * 60 - timeLeft) / (durationInSeconds * 60)) * 100;

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${String(mins).padStart(2, "0")}:${String(secs).padStart(2, "0")}`;
  };

  return (
    <div className="countdown-container">
      <div className="countdown-text">{formatTime(timeLeft)}</div>
      <div className="countdown-fill" style={{ width: `${100 - percentage}%` }} />
    </div>
  );
}

function StudentDoExamDetail() {
  const navigate = useNavigate();
  const { id } = useParams();
  const [examData, setExamData] = useState(null);
  const [answers, setAnswers] = useState({});
  const [chosenTestId, setChosenTestId] = useState(null);
  const [violationCount, setViolationCount] = useState(0);
  const handleSubmitExamRef = useRef();
  const lastViolationTimeRef = useRef(0); // D√πng ƒë·ªÉ gi·ªõi h·∫°n th·ªùi gian gi·ªØa 2 l·∫ßn vi ph·∫°m
  const questionRefs = useRef([]);


  const handleAnswerChange = (questionIndex, answer) => {
    setAnswers((prev) => ({ ...prev, [questionIndex]: answer }));
  };

  const handleSubmitExam = useCallback(async () => {
    if (!examData || !chosenTestId) {
      alert("‚ùå Kh√¥ng th·ªÉ g·ª≠i b√†i v√¨ ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÅ thi.");
      return;
    }

    const userJson = localStorage.getItem("user");
    let token = null;
    let studentId = null;

    if (userJson) {
      try {
        const userObj = JSON.parse(userJson);
        token = userObj.token;
        studentId = userObj.user_id;
      } catch (error) {
        alert("L·ªói khi ƒë·ªçc th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        return;
      }
    }

    if (!token) {
      alert("‚ùå Token kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói khi ƒë·ªçc token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      return;
    }

    const formattedAnswers = examData.questions.map((question, index) => ({
      question_id: question.question_id,
      selected_option: answers[index] || null,
    }));

    const submissionData = {
      test_id: chosenTestId,
      student_id: studentId,
      answers: formattedAnswers,
    };

    try {
      const res = await fetch("http://127.0.0.1:8000/api/student/student_test/student_do_exam/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(submissionData),
      });

      if (!res.ok) throw new Error(await res.text());

      const scoreRes = await fetch(
        `http://127.0.0.1:8000/api/student/student_test/student_do_exam/?student_id=${studentId}&test_id=${chosenTestId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (!scoreRes.ok) throw new Error(await scoreRes.text());

      const scoreData = await scoreRes.json();
      const examName = examData.exam_name || examData.exam?.name || "T√™n ƒë·ªÅ thi";

      localStorage.removeItem("examSession");
      navigate("/student/do_exam/result_exam", {
        state: {
          correctAnswers: scoreData.correct_answers,
          totalQuestions: scoreData.total_questions,
          examName,
        },
      });
    } catch (err) {
      alert("‚ùå G·ª≠i b√†i th·∫•t b·∫°i ho·∫∑c kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  }, [examData, chosenTestId, answers, navigate]);

  useEffect(() => {
    handleSubmitExamRef.current = handleSubmitExam;
  }, [handleSubmitExam]);

  const onEndHandler = useCallback(() => {
    alert("‚è∞ H·∫øt gi·ªù l√†m b√†i!");
    handleSubmitExamRef.current?.();
  }, []);

  useEffect(() => {
    // Ki·ªÉm so√°t ch·ªâ cho ph√©p 1 tab thi ho·∫°t ƒë·ªông
    if (!window.name) {
      window.name = `exam_tab_${Date.now()}`;
    }

    localStorage.setItem("examTabActive", window.name);

    const handleViolation = () => {
      const now = Date.now();
      // N·∫øu l·∫ßn vi ph·∫°m tr∆∞·ªõc < 1.5 gi√¢y (1500ms) th√¨ b·ªè qua (tr√°nh ƒë·∫øm 2 l·∫ßn)
      if (now - lastViolationTimeRef.current < 1500) return;

      lastViolationTimeRef.current = now;

      setViolationCount((prev) => {
        const newCount = prev + 1;

        if (newCount >= 3) {
          alert("üö® B·∫°n ƒë√£ vi ph·∫°m qu√° 3 l·∫ßn. B√†i thi s·∫Ω ƒë∆∞·ª£c n·ªôp t·ª± ƒë·ªông!");
          // Delay m·ªôt ch√∫t cho alert hi·ªÉn th·ªã tr∆∞·ªõc khi n·ªôp b√†i
          setTimeout(() => {
            handleSubmitExamRef.current?.();
          }, 3000);
        } else {
          alert(`‚ö†Ô∏è Ph√°t hi·ªán vi ph·∫°m (${newCount}/3)`);
        }
        return newCount;
      });
    };

    const handleVisibilityChange = () => {
      if (document.hidden) handleViolation();
    };

    const handleBlur = () => {
      handleViolation();
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);
    window.addEventListener("blur", handleBlur);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
      window.removeEventListener("blur", handleBlur);
      localStorage.removeItem("examTabActive");
    };
  }, []);

  useEffect(() => {
    if (!id) return;
    const savedSession = localStorage.getItem("examSession");

    if (savedSession) {
      const { testId, examData } = JSON.parse(savedSession);
      setChosenTestId(testId);
      setExamData(examData);
    } else {
      const fetchExam = async () => {
        try {
          const res = await fetch(`http://127.0.0.1:8000/api/teacher/teacher_test/teacher_manage_exam/teacher_manage_test/${id}/`);
          const testList = await res.json();
          const validTests = testList.filter(test => test && test.test_id);
          const testId = validTests[Math.floor(Math.random() * validTests.length)].test_id;

          const detailRes = await fetch(`http://127.0.0.1:8000/api/student/student_test/student_detail_test/${testId}/`);
          const detailData = await detailRes.json();

          console.log('Chi ti·∫øt d·ªØ li·ªáu tr·∫£ v·ªÅ:', detailData);
          setChosenTestId(testId);
          setExamData(detailData);

          localStorage.setItem("examSession", JSON.stringify({ testId, examData: detailData }));
        } catch (err) {
          console.error("‚ùå L·ªói khi l·∫•y ƒë·ªÅ thi:", err);
        }
      };

      fetchExam();
    }
  }, [id]);

  if (!examData) return <div style={{ marginTop: "40px" }}>ƒêang t·∫£i ƒë·ªÅ thi...</div>;

  return (
    <div style={{ display: "flex", padding: "20px", marginTop: "40px" }}>
      <div style={{ flex: 1, paddingRight: "280px" }}>
        <h2>{examData.exam_title}</h2>
        <hr />
        {examData.questions?.map((q, index) => (
          <div
            key={q.question_id || index}
            ref={(el) => (questionRefs.current[index] = el)}
            style={questionStyle}
          >
            <p><strong>C√¢u {index + 1}:</strong> {renderWithLatex(q.content || '')}</p>
            {q.image && (
              <div style={{
                textAlign: 'center',
                margin: '15px 0',
                padding: '10px'
              }}>
                <img
                  src={`http://localhost:8000${q.image}`}
                  alt="H√¨nh ·∫£nh c√¢u h·ªèi"
                  style={{
                    maxWidth: '100%',        // ‚úÖ Gi·∫£m k√≠ch th∆∞·ªõc xu·ªëng 50%
                    width: '100%',           // ‚úÖ ƒê·∫£m b·∫£o ·∫£nh lu√¥n 50% k√≠ch th∆∞·ªõc g·ªëc
                    height: 'auto',         // Gi·ªØ t·ª∑ l·ªá khung h√¨nh
                    marginTop: '10px',
                    marginBottom: '15px',
                    border: '1px solid #ddd',
                    borderRadius: '8px',
                    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
                    display: 'block',       // ƒê·∫£m b·∫£o ·∫£nh hi·ªÉn th·ªã nh∆∞ block element
                    margin: '10px auto'     // Center ·∫£nh
                  }}
                  onError={(e) => {
                    console.error('L·ªói t·∫£i ·∫£nh:', e.target.src);
                    e.target.style.display = 'none';
                  }}
                />
              </div>
            )}
            <ul style={{ listStyleType: "none", paddingLeft: 0 }}>
              {Array.isArray(q.answers) && q.answers.length >= 2 ? (
                q.answers.map((answer, idx) => {
                  const optionLabel = String.fromCharCode(65 + idx); // A, B, C,...
                  return (
                    <li key={answer.answer_id} style={{ marginBottom: "6px" }}>
                      <label style={{ cursor: "pointer", display: "flex", alignItems: "center" }}>
                        <input
                          type="radio"
                          name={`question_${index}`}
                          value={optionLabel}
                          checked={answers[index] === optionLabel}
                          onChange={() => handleAnswerChange(index, optionLabel)}
                          style={{ marginRight: "8px" }}
                        />
                        <span>
                          <strong>{optionLabel}.</strong> {renderWithLatex(answer.content || '')}
                        </span>
                      </label>
                    </li>
                  );
                })
              ) : (
                <li>
                  <label className="exam-form-label" htmlFor={`manual_answer_${index}`}>
                    ƒêi·ªÅn ƒë√°p √°n ƒë√∫ng:
                  </label>
                  <input
                    type="text"
                    id={`manual_answer_${index}`}
                    name={`manual_answer_${index}`}
                    className="exam-form-input"
                    value={answers[index] || ""}
                    onChange={(e) => handleAnswerChange(index, e.target.value)}
                    placeholder="Nh·∫≠p ƒë√°p √°n ƒë√∫ng"
                  />
                </li>
              )}
            </ul>


          </div>

        ))}
      </div>

      <div className="sidebar-container">
        <CountdownTimer
          durationInSeconds={examData.duration_minutes}
          onEnd={onEndHandler}
        />

        <button className="sidebar-submit-btn" onClick={handleSubmitExam}>
          N·ªòP B√ÄI
        </button>

        <p className="sidebar-warning">Kh√¥i ph·ª•c/l∆∞u b√†i l√†m &gt;</p>
        <p className="sidebar-note">
          Ch√∫ √Ω: b·∫°n c√≥ th·ªÉ click v√†o s·ªë th·ª© t·ª± c√¢u h·ªèi trong b√†i ƒë·ªÉ ƒë√°nh d·∫•u review
        </p>

        <div className="sidebar-question-list">
          <h4>Danh s√°ch c√¢u h·ªèi</h4>
          <div className="sidebar-question-buttons">
            {examData.questions.map((_, index) => (
              <button
                key={index}
                className={`sidebar-question-button ${answers[index] ? "answered" : ""}`}
                onClick={() => {
                  questionRefs.current[index]?.scrollIntoView({
                    behavior: "smooth",
                    block: "start",
                  });
                }}
              >
                {index + 1}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

const questionStyle = {
  marginBottom: "20px",
  padding: "12px",
  backgroundColor: "#f9f9f9",
  borderRadius: "10px",
  boxShadow: "0 2px 6px rgba(0,0,0,0.1)",
};

export default StudentDoExamDetail;